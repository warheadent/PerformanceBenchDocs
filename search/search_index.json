{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The Performance Benchmark plugin is designed to be a simple, easy to use performance analysis tool geared for distribution to end-users.</p> <p></p> <p>Just picked up the plugin and want to know how to use it? Go to Setup to get started!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Drop-in Performance Benchmark Test Manager</li> <li>Scoring and Grading system, automatically calculated by Level Sequence frame time<ul> <li>Grading system is configurable which is defined as target percentages</li> </ul> </li> <li>Beautiful interface showcasing a quick overview of performance results and score</li> <li>C++ Functions to pull important system details such as Processor, Physical Memory, Graphics Card.</li> </ul>"},{"location":"#support","title":"Support","text":"<p>Need help with using the plugin? We can provide you with support via Discord.</p> <p>Discord: http://discord.gg/warheadent</p> <p>Support is limited to issues with the plugin contents itself (User Interface Widgets, TestManager) - Feedback is welcome!</p>"},{"location":"Changelog/Changelog/","title":"Changelog","text":"<p>Releases are designated as simple version numbers. Any hotfixes will still be considered part of the same \"version\" when an update is pushed.</p>"},{"location":"Changelog/Changelog/#v3","title":"V3","text":"<p>Released 4/7/2023</p> <p>Versions: 5.0, 5.1, 5.2</p> <p>This release adds and improves on nearly every aspect of the plugin. With this release, we're sunsetting 4.27 support since this update was produced within 5.0 and Unreal doesn't handle binary backwards compatibility that well. If there is significant need for a 4.27 backport, let me know.</p> <p>5.2 support for this release is also planned once the version exits preview testing.</p> <ul> <li>NEW: Color Themes<ul> <li>This update ships with 6 different color themes, as well as an option for you to select your own color that you prefer</li> </ul> </li> <li>NEW: Structured data ready for export<ul> <li>With the initial release, there were plans to allow for users to be able to export test result data but there wasn't anything set up to allow developers to hook it into their own solutions. With this update, we provide a results data structure that supports this</li> </ul> </li> <li>NEW: GPU Driver Version and Date reporting<ul> <li>This release exposes the user's driver version and driver date (if reported by the system) to the developer. This was planned for the initial release of the plugin but ended up getting cut due to time constraints and issues with getting the plugin to compile</li> </ul> </li> <li>NEW: FPS counter next to Score widget<ul> <li>This can be toggled within the Test Manager</li> </ul> </li> <li> <p>NEW: Submit Data</p> <ul> <li>We restored this button since we expect developers to override the Submit Data event in Blueprint and hook in their own functionality for either exporting data to CSVs or posting to graph sites</li> <li>By default, it just prints a simple test results string to the log</li> <li>Visibility to the button can be controlled by the Test Manager</li> </ul> </li> <li> <p>IMPROVED: Most developer-exposed functions now have descriptions and proper categorization</p> </li> <li>IMPROVED: Frame Graph (how we determine average, min and max FPS values) is now way more accurate than before</li> <li>IMPROVED: Exit to Menu button now is overridable<ul> <li>We shipped this to always quit the application and that was not the intent. While it still does this by default, you can override the blueprint event to hook into your own logic.</li> </ul> </li> <li> <p>IMPROVED: Score Grades now reference a string table instead of individual localized texts</p> <ul> <li>Score grading (poor, great, excellent, etc.) now reference a String Table asset</li> <li>We'll continue to improve on this aspect of the plugin to make this friendlier to developers and end-users.</li> </ul> </li> <li> <p>FIXED: Score Grader Slider accuracy</p> <ul> <li>There was an issue where the slider (the arrow underneath the grades at the end result screen) wasn't accurately lining up with the grade that a user got. The logic here has been redone and it should hopefully always get the result correct.</li> </ul> </li> </ul>"},{"location":"Changelog/Changelog/#v2","title":"V2","text":"<p>Released 12/1/2021</p> <p>This release is focused on smaller quality of life updates. Other upcoming features are still in the pipeline.</p> <ul> <li>NEW: Camera fades when beginning and completing the benchmark sequence<ul> <li>Duration fades can be customized via the Test Manager under Setup &gt; Sequence</li> </ul> </li> <li>NEW: Customize the More Details text on the Test Results widget via Test Manager</li> </ul>"},{"location":"Changelog/Changelog/#v1","title":"V1","text":"<p>Released 11/28/2021</p> <p>Official marketplace release.</p>"},{"location":"Features/Scoring%20and%20Grading/Grading%20System/","title":"Grading System","text":"<p>The grading system within Performance Benchmark is done based on tiers of performance.</p> <p></p> <p>The different tiers are driven by some float parameters found within TestManager.</p> <p></p> <p>These can be adjusted freely to customize the tolerance of the rating system. </p> <p>The intent of the default parameters should show that falling below 50% of the passing score is the user getting consistently less than 30 fps, which for most applications is generally not an ideal experience.</p>"},{"location":"Features/Scoring%20and%20Grading/Score%20System/","title":"Score System","text":"<p>Score is accumulated by number of drawn frames since the test began. The higher the frame rate of the current user, the bigger score.</p> <p>All tests ideally should be conducted with an uncapped (or extremely high cap) frame rate to allow for performance headroom analysis.</p>"},{"location":"Features/Scoring%20and%20Grading/Score%20System/#passing-score","title":"Passing Score","text":"<p>The passing score is calculated based on a 60FPS sequence target.</p> <p>By default, the Test Manager will accept a tolerance of 98% if the user doesn't quite achieve the 60FPS target.</p>"},{"location":"Features/System%20Specification%20Reporting/System%20Specifications/","title":"System Specification","text":"<p>The plugin uses a Blueprint Library made in C++ in order to pull some information the Unreal Engine has on the end-user's system configuration.</p> <p></p> <p>The following details were exposed to Blueprint:</p> <ul> <li>Operating System Version</li> <li>CPU/Processor Name</li> <li>GPU Info<ul> <li>GPU Name</li> <li>GPU Brand</li> <li>GPU Driver Version</li> <li>GPU Driver Date</li> </ul> </li> <li>Total Physical Memory</li> <li>RHI Version (D3D11, D3D12, etc.)</li> </ul> <p>These functions may prove useful if developers are looking to capture this information to an analytics backend or output log.</p> <p></p>"},{"location":"Features/Widget%20Customization/Color%20Themes/","title":"Color Themes","text":"<p>With the release of V3, the option to change the primary color of the widget backgrounds has been added. We ship with 6 different presets and also allow developers to choose a custom one if desired.</p> <p>Developers can find the option for the Color Theme Preset on the BP_PerfBench_TestManager under the Setup &gt; Widget section.</p> <p></p>"},{"location":"Features/Widget%20Customization/FPS%20Counter/","title":"FPS Counter","text":"<p>In V3, there is an FPS counter next to the accumulating score counter during the run that can be toggled on or off based on the developer's preferences.</p> <p></p> <p>The toggle can be found on the BP_PerfBench_TestManager under Setup &gt; Widget as \"Show FPSCounter\"</p> <p></p>"},{"location":"Usage/Setup/","title":"Setup","text":""},{"location":"Usage/Setup/#locating-plugin-contents","title":"Locating Plugin Contents","text":"<p>After downloading and enabling the plugin within the project, developers should go to their Content Browser and locate the PerformanceBenchTest plugin content folder.</p> <p>Developers that do not see any plugin content folders should enable the option to see it within their Content Browser, found in the bottom right of the window under View Options.</p> <p></p> <p>The plugin comes with a few User Widgets and one Blueprint Actor.</p> <p></p> <ul> <li>BP_PerfBench_TestManager<ul> <li>The TestManager is used to manage the communication and data between the user widgets, the level sequence and all of the scoring and grading</li> </ul> </li> <li>WBP_PerfBench_ScoreCounter<ul> <li>The Score Counter is a very simple User Widget that displays the user's current score throughout the benchmark</li> </ul> </li> <li>WBP_PerfBench_TestResults<ul> <li>The Test Results User Widget provides the end-user result screen that contains the overview of how the test went, the system configuration and the associated parameters and statistics on performance</li> </ul> </li> </ul>"},{"location":"Usage/Setup/#using-testmanager","title":"Using TestManager","text":"<p>The goal of the plugin is to make it incredibly easy for developers to drag and drop in the Test Manager with minimal additional setup needed.</p> <ol> <li>Locate BP_PerfBench_TestManager in the Content Browser and drag it into the level</li> <li>Find the Benchmark Sequence variable in the Details panel and change to the intended Level Sequence used for the Performance Benchmark analysis</li> <li>(Optional) Adjust the Warmup Time to account for any asset streaming</li> </ol> <p>Developers have the option via the Auto Play variable to either have the Test Manager automatically begin testing on Begin Play, or manually start the test.</p> <p></p> <p>It should be noted that this plugin does not automatically set up any benchmark sequence track. Developers are responsible for creating a Level Sequence within their levels that the TestManager can reference.</p>"},{"location":"Usage/Setup/#manual-start","title":"Manual Start","text":"<p>Developers that wish to have more manual control over when the performance benchmark starts can call the StartPerfBenchTest interface function after unchecking the Auto Play boolean.</p> <p></p>"},{"location":"Usage/Troubleshooting/","title":"Troubleshooting","text":""},{"location":"Usage/Troubleshooting/#level-sequence-playback-issues","title":"Level Sequence Playback Issues","text":""},{"location":"Usage/Troubleshooting/#context","title":"Context","text":"<p>During development, we observed some behavior where if there was a Level Sequence on the level already with Auto Play enabled it would conflict with the Test Manager.</p> <p>The Test Manager creates a new Level Sequence Actor based with custom settings instead of using any pre-existing Level Sequence Actor on the level. This is to minimize any weird configuration errors stemming from parameters not controlled by Test Manager.</p>"},{"location":"Usage/Troubleshooting/#fix","title":"Fix","text":"<p>To resolve any weird playback issues, remove any extra Level Sequences or disable automatic playback on them.</p>"},{"location":"Usage/Troubleshooting/#multiple-test-managers","title":"Multiple Test Managers","text":"<p>Not currently supported. Will look to add a warning about multiple Test Managers.</p>"},{"location":"Usage/Troubleshooting/#passing-score-appears-lower-than-expected","title":"Passing Score Appears Lower Than Expected","text":""},{"location":"Usage/Troubleshooting/#context_1","title":"Context","text":"<p>The Score System is based on the total frame count of the Level Sequence. By default, Level Sequences are created at 30 FPS and our plugin should automatically detect and multiply that value by 2x to account for the 60FPS target.</p> <p>However, non-standard FPS targets are not supported but will continue to be accepted. We have added some log warnings to help raise visibility to this potential issue.</p> <p>We may also look into alternatives on how to calculate passing score criterias so that setup continues to need minimal effort.</p>"},{"location":"Usage/Troubleshooting/#fix_1","title":"Fix","text":"<p>To resolve the passing score being lower than expected, developers should adjust the Sequence Display Rate of the Level Sequence being used for the Performance Benchmark. Our plugin can account for values of 30, 60 and 120 FPS, but we recommend selecting 60 FPS.</p> <p></p>"}]}